using System;
using System.Collections.Generic;
using System.Collections.Concurrent;
using System.Linq;
using System.Text.RegularExpressions;
using System.Threading.Tasks;

using NuciExtensions;

using StellarisNameListGenerator.Models;

namespace StellarisNameListGenerator.Service.NamesBuilders
{
    public abstract class NamesBuilder
    {
        const int IndentationSize = 4;
        const int MaximumLineLength = 150;

        protected string BuildNameArray(IEnumerable<NameGroup> nameGroups, string arrayName, int indentationLevels)
            => BuildNameArray(nameGroups, arrayName, indentationLevels, string.Empty);

        protected string BuildNameArray(IEnumerable<NameGroup> nameGroups, string arrayName, int indentationLevels, string sequentialName)
        {
            string content = string.Empty;

            if (string.IsNullOrWhiteSpace(sequentialName) && nameGroups.All(x => x.Values.Count == 0))
            {
                return content;
            }

            content += $"{GetIndentation(indentationLevels)}{arrayName} = {{{Environment.NewLine}";


            if (nameGroups?.Sum(x => x.Values.Count) > 0)
            {
                if (!string.IsNullOrWhiteSpace(sequentialName))
                {
                    content += $"{GetIndentation(indentationLevels + 1)}random_names = {{{Environment.NewLine}";
                    indentationLevels += 1;
                }

                content += GetFormattedNameCollection(nameGroups, indentationLevels + 1);

                if (!string.IsNullOrWhiteSpace(sequentialName))
                {
                    content += $"{GetIndentation(indentationLevels)}}}{Environment.NewLine}";
                    indentationLevels -= 1;
                }
            }
            else if (!string.IsNullOrWhiteSpace(sequentialName))
            {
                content += $"{GetIndentation(indentationLevels + 1)}sequential_name = \"{sequentialName}\"{Environment.NewLine}";
            }

            content += $"{GetIndentation(indentationLevels)}}}{Environment.NewLine}";

            return content;
        }

        protected string GetFormattedNameCollection(IEnumerable<NameGroup> groups, int indentationLevels)
        {
            string indentation = GetIndentation(indentationLevels);
            IList<string> usedNames = new List<string>();
            IList<string> values = new List<string>();

            groups = groups
                .GroupBy(x => x.Name)
                .Select(g => new NameGroup
                {
                    Name = g.First().Name,
                    ExplicitValues = g.SelectMany(x => x.Values).ToList()
                });

            foreach (NameGroup group in groups.OrderBy(x => x.Name))
            {
                IList<string> lines = new List<string> { indentation };
                bool hasNames = false;

                IEnumerable<string> validNames = group.Values
                    .Where(x => !usedNames.Any(y => DoNamesMatch(x, y)) && !string.IsNullOrWhiteSpace(x))
                    .OrderBy(x => x)
                    .Distinct();

                foreach (string name in validNames)
                {
                    hasNames = true;
                    usedNames.Add(name);

                    string formattedName = ProcessName(name);

                    if (formattedName.Contains(" "))
                    {
                        formattedName = $"\"{formattedName}\"";
                    }

                    if (lines.Last().Length + 1 + formattedName.Length > MaximumLineLength)
                    {
                        lines.Add(indentation);
                    }

                    lines[lines.Count() - 1] += $"{formattedName} ";
                }

                if (!hasNames)
                {
                    continue;
                }

                string value = string.Empty;

                if (!string.IsNullOrWhiteSpace(group.Name))
                {
                    value += $"{indentation}# >>> {group.Name}{Environment.NewLine}";
                }

                foreach (string line in lines)
                {
                    value += $"{line.Substring(0, line.Length - 1)}{Environment.NewLine}";
                }

                values.Add(value);
            }

            return string.Join('\n', values);
        }

        protected List<NameGroup> CleanGenericNames(IEnumerable<NameGroup> genericNameGroups, params IEnumerable<NameGroup>[] specificNameGroupLists)
        {
            ConcurrentBag<NameGroup> cleanGenericNameGroups = new ConcurrentBag<NameGroup>();

            Parallel.ForEach(genericNameGroups, genericNameGroup =>
            {
                NameGroup cleanGenericNameGroup = new NameGroup();
                cleanGenericNameGroup.Name = genericNameGroup.Name;
                cleanGenericNameGroup.ExplicitValues = genericNameGroup.Values.Where(genericName =>
                    specificNameGroupLists.All(specificNameGroups => specificNameGroups.All(specificNameGroup =>
                        specificNameGroup.Values.All(specificName => !DoNamesMatch(specificName, genericName))))).ToList();

                cleanGenericNameGroups.Add(cleanGenericNameGroup);
            });

            return cleanGenericNameGroups.ToList();
        }

        protected NameGroup GenerateUnifiedNameGroup(IEnumerable<NameGroup> nameGroups, string category, string groupName, string nameFormat)
        {
            NameGroup group = new NameGroup();
            group.Name = $"{category} - {groupName}";
            group.ExplicitValues = nameGroups
                .SelectMany(x => x.Values)
                .Distinct()
                .Select(y => string.Format(nameFormat, y))
                .ToList();

            return group;
        }

        protected string GetIndentation(int levels)
        {
            return string.Empty.PadRight(levels * IndentationSize, ' ');
        }

        protected string ProcessName(string name)
        {
            string processedName = name;

            processedName = Regex.Replace(processedName, "([–êŒë·é™ÍìÆùñ†]|A‚Äç)", "A");
            processedName = Regex.Replace(processedName, "([ŒÜ])", "√Å");
            processedName = Regex.Replace(processedName, "([·æ∫»Ä])", "√Ä");
            processedName = Regex.Replace(processedName, "([·∫Æ·∫∂])", "ƒÇ");
            processedName = Regex.Replace(processedName, "([·∫®])", "√Ç");
            processedName = Regex.Replace(processedName, "( ·êã)", " √Ç");
            processedName = Regex.Replace(processedName, "([Œí·è¥Íìê·∏Ü]|B‚Äç|B‚Äå|Ÿæ)", "B");
            processedName = Regex.Replace(processedName, "([Œß])", "Ch");
            processedName = Regex.Replace(processedName, "([–°œπ·èüÍìö])", "C");
            processedName = Regex.Replace(processedName, "([ƒà–¶])", "C");
            processedName = Regex.Replace(processedName, "([·é†Íìì]|D‚Äç)", "D");
            processedName = Regex.Replace(processedName, "([–è])", "D≈æ");
            processedName = Regex.Replace(processedName, "([∆â])", "ƒê");
            processedName = Regex.Replace(processedName, "([–ïŒï·é¨Íì∞∆ê–≠])", "E");
            processedName = Regex.Replace(processedName, "([–Å])", "√ã");
            processedName = Regex.Replace(processedName, "([Œà])", "√â");
            processedName = Regex.Replace(processedName, "([‚àÉ])", "∆é");
            processedName = Regex.Replace(processedName, "([Íìù·∏û])", "F");
            processedName = Regex.Replace(processedName, "([·èÄÍìñ]|G‚Äç)", "G");
            processedName = Regex.Replace(processedName, "([∆¢])", "ƒû"); // Untested in the games
            processedName = Regex.Replace(processedName, "([»ú])", "Gh"); // Or G
            processedName = Regex.Replace(processedName, "([∆î])", "Gh");
            processedName = Regex.Replace(processedName, "([–Æ])", "Iu");
            processedName = Regex.Replace(processedName, "([Œó·éªÍìß·∏§])", "H");
            processedName = Regex.Replace(processedName, "([–ÜŒô”Ä”èŒä∆ó])", "I");
            processedName = Regex.Replace(processedName, "([·ªà])", "√å");
            processedName = Regex.Replace(processedName, "([–áŒ™·∏Æ]|ŒôÃàÃÅ)", "√è");
            processedName = Regex.Replace(processedName, "([«è])", "ƒ¨");
            processedName = Regex.Replace(processedName, "([–à·é´Íìô])", "J");
            processedName = Regex.Replace(processedName, "([–öŒö·è¶Íìó]|K‚Äç)", "K");
            processedName = Regex.Replace(processedName, "([–å])", "·∏∞");
            processedName = Regex.Replace(processedName, "HÃ±", "Kh");
            processedName = Regex.Replace(processedName, "([·èûÍì°‘º]|L‚Äå)", "L");
            processedName = Regex.Replace(processedName, "([–úŒú·é∑Íìü·πÄ]|MÃÑ|MÃê)", "M");
            processedName = Regex.Replace(processedName, "(«ä)", "NJ");
            processedName = Regex.Replace(processedName, "([–ùŒùÍì†·πà]|N‚Äå)", "N");
            processedName = Regex.Replace(processedName, "(NÃ±)", "≈Ö");
            processedName = Regex.Replace(processedName, "[»†]", "≈ä");
            processedName = Regex.Replace(processedName, "([–ûŒüÍì≥’ï∆Ü·ª¢])", "O");
            processedName = Regex.Replace(processedName, "([”¶])", "√ñ");
            processedName = Regex.Replace(processedName, "([·ªöŒå])", "√ì");
            processedName = Regex.Replace(processedName, "([·ªé])", "√í");
            processedName = Regex.Replace(processedName, "([·ªñ])", "√î");
            processedName = Regex.Replace(processedName, "([«ë])", "≈é");
            processedName = Regex.Replace(processedName, "([«¨])", "«™");
            processedName = Regex.Replace(processedName, "([–†Œ°·è¢Íìë]|P‚Äç|–ü)", "P");
            processedName = Regex.Replace(processedName, "([«∑·ªº])", "Uu"); // Or W
            processedName = Regex.Replace(processedName, "^…∏", "P");
            processedName = Regex.Replace(processedName, " …∏", " P");
            processedName = Regex.Replace(processedName, "([‘ö])", "Q");
            processedName = Regex.Replace(processedName, "([·èíÍì£·πû]|R‚Äç|R‚Äå)", "R");
            processedName = Regex.Replace(processedName, "(RÃ•ÃÑ)", "≈îu");
            processedName = Regex.Replace(processedName, "(RÃ•)", "Ru");
            processedName = Regex.Replace(processedName, "([–Ö·èöÍì¢’è]|S‚Äç|S‚Äå)", "S");
            processedName = Regex.Replace(processedName, "([·πÆŒò])", "Th");
            processedName = Regex.Replace(processedName, "([–¢Œ§·é¢Íìî])", "T");
            processedName = Regex.Replace(processedName, "·π¨‚Äç", "·π¨");
            processedName = Regex.Replace(processedName, "([’çÍì¥∆±])", "U");
            processedName = Regex.Replace(processedName, "([«ì])", "≈¨");
            processedName = Regex.Replace(processedName, "([«ô])", "≈¨"); // Or √ú
            processedName = Regex.Replace(processedName, "([«õ])", "√ú");
            processedName = Regex.Replace(processedName, "([–í·èôÍì¶])", "V");
            processedName = Regex.Replace(processedName, "([·é≥Íì™‘ú])", "W");
            processedName = Regex.Replace(processedName, "([·∫Ü])", "·∫Ç");
            processedName = Regex.Replace(processedName, "([–•ŒßÍì´])", "X");
            processedName = Regex.Replace(processedName, "([“ÆŒ•Íì¨])", "Y");
            processedName = Regex.Replace(processedName, "([Œé])", "√ù");
            processedName = Regex.Replace(processedName, "([Œñ·èÉÍìú∆µ])", "Z");
            processedName = Regex.Replace(processedName, "[«Æ]", "≈Ω");
            processedName = Regex.Replace(processedName, "([”ô])", "√¶");
            processedName = Regex.Replace(processedName, "([Œ±–∞ùñ∫]|a‚Äç)", "a");
            processedName = Regex.Replace(processedName, "([·Ω∞»Å])", "√†");
            processedName = Regex.Replace(processedName, "([Œ¨»ß])", "√°");
            processedName = Regex.Replace(processedName, "([”ë·∫Ø«é·∫µ·∫∑])", "ƒÉ");
            processedName = Regex.Replace(processedName, "([·∫©])", "√¢");
            processedName = Regex.Replace(processedName, "([^ ])·êã", "$1√¢");
            processedName = Regex.Replace(processedName, "([·èº·∏á]|b‚Äç|b‚Äå)", "b");
            processedName = Regex.Replace(processedName, "([œá])", "ch");
            processedName = Regex.Replace(processedName, "([ƒâ—Ü])", "c");
            processedName = Regex.Replace(processedName, "([‚ÖæùñΩ]|d‚Äç)", "d");
            processedName = Regex.Replace(processedName, "([—ü])", "d≈æ");
            processedName = Regex.Replace(processedName, "([–µŒµ…õ—ç])", "e");
            processedName = Regex.Replace(processedName, "([ƒï])", "ƒõ");
            processedName = Regex.Replace(processedName, "([«ù])", "…ô");
            processedName = Regex.Replace(processedName, "([—ë])", "√´");
            processedName = Regex.Replace(processedName, "([Œ≠])", "√©");
            processedName = Regex.Replace(processedName, "([·∏ü])", "f");
            processedName = Regex.Replace(processedName, "([–≥]|g‚Äç|g‚Äå)", "g");
            processedName = Regex.Replace(processedName, "([∆£]|·∏°)", "ƒü"); // Untested in the games
            processedName = Regex.Replace(processedName, "(⁄≠)", "ƒ°");
            processedName = Regex.Replace(processedName, "([»ù])", "gh"); // Or g
            processedName = Regex.Replace(processedName, "([…£])", "gh");
            processedName = Regex.Replace(processedName, "([·∏•])", "h");
            processedName = Regex.Replace(processedName, "([—é])", "iu");
            processedName = Regex.Replace(processedName, "([—è])", "ia");
            processedName = Regex.Replace(processedName, "([—ñŒπ…®])", "i");
            processedName = Regex.Replace(processedName, "([·ªâ])", "√¨");
            processedName = Regex.Replace(processedName, "([…©])", "ƒ±");
            processedName = Regex.Replace(processedName, "([«ê])", "ƒ≠");
            processedName = Regex.Replace(processedName, "([—óœäŒê·∏Ø])", "√Ø");
            processedName = Regex.Replace(processedName, "([—ò]|j‚Äå)", "j");
            processedName = Regex.Replace(processedName, "([–∫Œ∫]|k‚Äç)", "k");
            processedName = Regex.Replace(processedName, "([—ú])", "·∏±");
            processedName = Regex.Replace(processedName, "([·∫ñ])", "kh");
            processedName = Regex.Replace(processedName, "([–ª]|l‚Äå)", "l");
            processedName = Regex.Replace(processedName, "([…¨∆ö])", "≈Ç");
            processedName = Regex.Replace(processedName, "([·πÅ]|mÃÑ|mÃê|mÃÉ)", "m");
            processedName = Regex.Replace(processedName, "(«å)", "nj");
            processedName = Regex.Replace(processedName, "([–Ω·πâ]|n‚Äå)", "n");
            processedName = Regex.Replace(processedName, "(nÃ±)", "≈Ü");
            processedName = Regex.Replace(processedName, "[∆û]", "≈ã");
            processedName = Regex.Replace(processedName, "([–æŒø÷Ö…î·ª£])", "o");
            processedName = Regex.Replace(processedName, "([”ß])", "√∂");
            processedName = Regex.Replace(processedName, "([œå·ªõ])", "√≥");
            processedName = Regex.Replace(processedName, "([·ªè])", "√≤");
            processedName = Regex.Replace(processedName, "([·ªó])", "√¥");
            processedName = Regex.Replace(processedName, "([«í])", "≈è");
            processedName = Regex.Replace(processedName, "([«≠])", "«´");
            processedName = Regex.Replace(processedName, "([—Ä·πó…∏]|p‚Äç|–ø)", "p");
            processedName = Regex.Replace(processedName, "([‘•])", "p"); // It's actually ·πó but that doesn't work either
            processedName = Regex.Replace(processedName, "([ÍÆ¢·πü]|r‚Äç|r‚Äå)", "r");
            processedName = Regex.Replace(processedName, "(rÃ•ÃÑ)", "≈ïu");
            processedName = Regex.Replace(processedName, "(rÃ•)", "ru");
            processedName = Regex.Replace(processedName, "(s‚Äç|s‚Äå)", "s");
            processedName = Regex.Replace(processedName, "([·πØŒ∏])", "th");
            processedName = Regex.Replace(processedName, "([—Ç])", "t");
            processedName = Regex.Replace(processedName, "([‚Ä°])", "t"); // Guessed
            processedName = Regex.Replace(processedName, "·π≠‚Äç", "·π≠");
            processedName = Regex.Replace(processedName, "([∆ø·ªΩ])", "uu"); // Or w
            processedName = Regex.Replace(processedName, "([—É ä])", "u");
            processedName = Regex.Replace(processedName, "([«î])", "≈≠");
            processedName = Regex.Replace(processedName, "([«ö])", "≈≠"); // Or √º
            processedName = Regex.Replace(processedName, "([œç])", "√∫");
            processedName = Regex.Replace(processedName, "([«ú])", "√º");
            processedName = Regex.Replace(processedName, "([·∫á])", "·∫É");
            processedName = Regex.Replace(processedName, "([Œ≥])", "y");
            processedName = Regex.Replace(processedName, "([∆∂·∂ª])", "z");
            processedName = Regex.Replace(processedName, "[«Ø]", "≈æ");

            // Characters with apostrophe that needs to be detached
            processedName = processedName.Replace("∆ô", "k'");
            processedName = processedName.Replace("∆ò", "K'");
            processedName = processedName.Replace("∆∞", "u'");
            processedName = processedName.Replace("∆Ø", "U'");
            processedName = processedName.Replace("·ª©", "√∫'");
            processedName = processedName.Replace("·ª®", "√ö'");
            processedName = processedName.Replace("·ª´", "√π'");
            processedName = processedName.Replace("·ª™", "√ô'");
            processedName = processedName.Replace("·ª≠", "·ªß'");
            processedName = processedName.Replace("·ª¨", "·ª¶'");

            // Secondary accent diacritic
            processedName = processedName.Replace('·∫§', '√Ç');
            processedName = processedName.Replace('·∏ñ', 'ƒí');
            processedName = processedName.Replace('·∫æ', '√ä');
            processedName = processedName.Replace('·πí', '≈å');
            processedName = processedName.Replace('·ªê', '√î');
            processedName = processedName.Replace('·∫•', '√¢');
            processedName = processedName.Replace('·∏ó', 'ƒì');
            processedName = processedName.Replace('·∫ø', '√™');
            processedName = processedName.Replace('·πì', '≈ç');
            processedName = processedName.Replace('·ªë', '√¥');

            // Secondary grave accent diacritic
            processedName = processedName.Replace('·∫¶', '√Ç');
            processedName = processedName.Replace('·ªÄ', '√ä');
            processedName = processedName.Replace('·ªí', '√î');
            processedName = processedName.Replace('·∫ß', '√¢');
            processedName = processedName.Replace('·ªÅ', '√™');
            processedName = processedName.Replace('·ªì', '√¥');

            // Secondary hook diacritic
            processedName = processedName.Replace('·ªÇ', '√ä');
            processedName = processedName.Replace('·ªî', '√î');
            processedName = processedName.Replace('·ªÉ', '√™');
            processedName = processedName.Replace('·ªï', '√¥');

            // Floating vertical lines
            processedName = processedName.Replace("aÃç", "»ß");
            processedName = processedName.Replace("eÃç", "ƒó");
            processedName = processedName.Replace("iÃç", "i");
            processedName = processedName.Replace("oÃç", "»Ø");
            processedName = processedName.Replace("uÃç", "√∫");

            // Floating accents
            processedName = processedName.Replace("aÃÅ", "√°");
            processedName = processedName.Replace("cÃÅ", "ƒá");
            processedName = processedName.Replace("eÃÅ", "√©");
            processedName = processedName.Replace("gÃÅ", "«µ");
            processedName = processedName.Replace("iÃÅ", "√≠");
            processedName = processedName.Replace("mÃÅ", "·∏ø");
            processedName = processedName.Replace("nÃÅ", "≈Ñ");
            processedName = processedName.Replace("pÃÅ", "·πï");
            processedName = processedName.Replace("rÃÅ", "≈ï");
            processedName = processedName.Replace("sÃÅ", "≈õ");
            processedName = processedName.Replace("uÃÅ", "√∫");
            processedName = processedName.Replace("yÃÅ", "√Ω");
            processedName = processedName.Replace("zÃÅ", "≈∫");

            // Floating grave accents
            processedName = processedName.Replace("iÃÄ", "√¨");
            processedName = processedName.Replace("nÃÄ", "«π");
            processedName = processedName.Replace("oÃÄ", "√≤");
            processedName = processedName.Replace("uÃÄ", "√π");
            processedName = processedName.Replace("yÃÄ", "·ª≥");

            // Floating umlauts
            processedName = processedName.Replace("TÃà", "TÃà");
            processedName = processedName.Replace("aÃà", "√§");
            processedName = processedName.Replace("ƒÅÃà", "«ü");
            processedName = processedName.Replace("ƒÖÃà", "ƒÖÃà");
            processedName = processedName.Replace("bÃà", "bÃà");
            processedName = processedName.Replace("cÃà", "cÃà");
            processedName = processedName.Replace("eÃà", "√´");
            processedName = processedName.Replace("…õÃàÃà", "√´");
            processedName = processedName.Replace("hÃà", "·∏ß");
            processedName = processedName.Replace("iÃà", "√Ø");
            processedName = processedName.Replace("jÃà", "jÃà");
            processedName = processedName.Replace("kÃà", "kÃà");
            processedName = processedName.Replace("lÃà", "lÃà");
            processedName = processedName.Replace("mÃà", "mÃà");
            processedName = processedName.Replace("nÃà", "nÃà");
            processedName = processedName.Replace("oÃà", "√∂");
            processedName = processedName.Replace("≈çÃà", "»´");
            processedName = processedName.Replace("«´Ãà", "«´Ãà");
            processedName = processedName.Replace("…îÃàÃà", "√∂");
            processedName = processedName.Replace("pÃà", "pÃà");
            processedName = processedName.Replace("qÃà", "qÃà");
            processedName = processedName.Replace("qÃ£Ãà", "qÃ£Ãà");
            processedName = processedName.Replace("rÃà", "rÃà");
            processedName = processedName.Replace("sÃà", "sÃà");
            processedName = processedName.Replace("tÃà", "t"); // Because ·∫ó is a
            processedName = processedName.Replace("uÃà", "√º");
            processedName = processedName.Replace("vÃà", "vÃà");
            processedName = processedName.Replace("wÃà", "·∫Ö");
            processedName = processedName.Replace("xÃà", "·∫ç");
            processedName = processedName.Replace("yÃà", "√ø");
            processedName = processedName.Replace("zÃà", "zÃà");

            // Floating tildas
            processedName = processedName.Replace("aÃÉ", "√£");
            processedName = processedName.Replace("eÃÉ", "·∫Ω");
            processedName = processedName.Replace("iÃÉ", "ƒ©");
            processedName = processedName.Replace("nÃÉ", "√±");
            processedName = processedName.Replace("oÃÉ", "√µ");
            processedName = processedName.Replace("uÃÉ", "≈©");
            processedName = processedName.Replace("vÃÉ", "·πΩ");
            processedName = processedName.Replace("yÃÉ", "·ªπ");

            // Floating carets
            processedName = processedName.Replace("·π≥ÃÇ", "√ª");

            // Floating commas
            processedName = processedName.Replace("AÃì", "√Å"); // Or √Å?

            // Other floating diacritics
            processedName = Regex.Replace(processedName, "[ÃìÃÅÃÄÃÜÃÇÃåÃàÃãÃßÃÑÃçÃ£Ã§Ã¶ÕòÃÉ·†åÃ¨]", "");
            processedName = Regex.Replace(processedName, "(‡•é|‡™º|‚Äå‡•é)", ""); // ???
            processedName = Regex.Replace(processedName, "[„ÉªÃ≤ÃáÃêÃ•ÃÆÃ±Õ°]", ""); // Diacritics that attach to characters... I guess

            processedName = Regex.Replace(processedName, "[ î]", " æ");
            processedName = Regex.Replace(processedName, "[ æ ª º Ω π‚Ä≤]", "¬¥");
            processedName = Regex.Replace(processedName, "[ ø]", "`");
            processedName = Regex.Replace(processedName, "[Íûå ø ≤—å]", "'");
            processedName = Regex.Replace(processedName, "[ ∫‚Ä≥‚Åø]", "\"");
            processedName = Regex.Replace(processedName, "[‚Äå‚Äç]", "");
            processedName = Regex.Replace(processedName, "[‚Äì‚Äî]", "-");
            processedName = Regex.Replace(processedName, "[‚Äé¬∑]", "");
            processedName = Regex.Replace(processedName, "([¬ù¬õ‚Äé¬õ¬ù‚Äé])", ""); // Invisible characters

            // Charset replacements
            processedName = Regex.Replace(processedName, "[«¢]", "√Ü");
            processedName = Regex.Replace(processedName, "[·∫†∆è]", "A");
            processedName = Regex.Replace(processedName, "[·∫¢]", "√Ä");
            processedName = Regex.Replace(processedName, "[·∫¨]", "√Ç");
            processedName = Regex.Replace(processedName, "[ƒÇƒÄ]", "√É");
            processedName = Regex.Replace(processedName, "[«û]", "√Ñ");
            processedName = Regex.Replace(processedName, "[·∏Ç·∏Ñ]", "B");
            processedName = Regex.Replace(processedName, "[ƒÜƒä]", "C");
            processedName = Regex.Replace(processedName, "[ƒå]", "Ch");
            processedName = Regex.Replace(processedName, "[·∏é∆ä·∏êƒé·∏å]", "D");
            processedName = Regex.Replace(processedName, "[ƒê∆â]", "√ê");
            processedName = Regex.Replace(processedName, "[ƒí·∫∏·∫º]", "√ã");
            processedName = Regex.Replace(processedName, "[ƒñ]", "√â");
            processedName = Regex.Replace(processedName, "[·∫∫]", "√à");
            processedName = Regex.Replace(processedName, "[·ªÜƒö]", "√ä");
            processedName = Regex.Replace(processedName, "[ƒò∆é]", "E");
            processedName = Regex.Replace(processedName, "([ƒî])", "√ä");
            processedName = Regex.Replace(processedName, "[ƒûƒúƒ¢«¥]", "G");
            processedName = Regex.Replace(processedName, "[ƒ†]([^h])", "Gh$1");
            processedName = Regex.Replace(processedName, "[ƒ†](h)", "Gh");
            processedName = Regex.Replace(processedName, "[ƒ§»û·∏¶·∏®ƒ¶]", "H");
            processedName = Regex.Replace(processedName, "[ƒ∞ƒÆ·ªä]", "I");
            processedName = Regex.Replace(processedName, "[ƒ¨ƒ™ƒ®]", "√è");
            processedName = Regex.Replace(processedName, "[ƒ¥«¶]", "J");
            processedName = Regex.Replace(processedName, "JÃå", "J");
            processedName = Regex.Replace(processedName, "[·∏™]", "Kh");
            processedName = Regex.Replace(processedName, "[·∏∞·∏≤ƒ∂·∏¥«®]", "K");
            processedName = Regex.Replace(processedName, "[ƒπ≈ÅƒΩ·∏∂ƒª]", "L");
            processedName = Regex.Replace(processedName, "[·πÇ·∏æ]", "M");
            processedName = Regex.Replace(processedName, "[≈á]", "√ë");
            processedName = Regex.Replace(processedName, "[«∏]", "En");
            processedName = Regex.Replace(processedName, "[≈É≈Ö·πÑ·πÜ≈ä∆ù]", "N");
            processedName = Regex.Replace(processedName, "[∆†·ªå]", "O");
            processedName = Regex.Replace(processedName, "[»Æ]", "√ì");
            processedName = Regex.Replace(processedName, "[·ªú]", "√í");
            processedName = Regex.Replace(processedName, "[·ª†≈å]", "√ï");
            processedName = Regex.Replace(processedName, "[»™]", "√ï");
            processedName = Regex.Replace(processedName, "[≈éÃ§≈é]", "√ï"); // Maybe replace with "Eo"
            processedName = Regex.Replace(processedName, "[≈ê«™]", "√ñ");
            processedName = Regex.Replace(processedName, "[«æ]", "√ò");
            processedName = Regex.Replace(processedName, "[·ªò]", "√î");
            processedName = Regex.Replace(processedName, "[·πî]", "P");
            processedName = Regex.Replace(processedName, "[≈ò]", "Rz");
            processedName = Regex.Replace(processedName, "[≈î·πò·πö≈ñ]", "R");
            processedName = Regex.Replace(processedName, "[≈ö≈ú≈û»ò·π¢·π†]", "S");
            processedName = Regex.Replace(processedName, "[≈§]", "Ty");
            processedName = Regex.Replace(processedName, "[»ö≈¢·π¨TÃà≈¶]", "T");
            processedName = Regex.Replace(processedName, "[≈Æ≈≤·ª§]", "U");
            processedName = Regex.Replace(processedName, "[≈®≈™≈¨≈∞·π≤]", "√ú");
            processedName = Regex.Replace(processedName, "[·ª¶]", "√ô");
            processedName = Regex.Replace(processedName, "[·πæ]", "V");
            processedName = Regex.Replace(processedName, "[·∫Ç·∫Ñ≈¥]", "W");
            processedName = Regex.Replace(processedName, "[·∫å]", "X");
            processedName = Regex.Replace(processedName, "[≈∂]", "Y");
            processedName = Regex.Replace(processedName, "[»≤]", "≈∏");
            processedName = Regex.Replace(processedName, "[·ª≤·∫é]", "√ù");
            processedName = Regex.Replace(processedName, "[≈π·∫í]", "Z");
            processedName = Regex.Replace(processedName, "[≈ª]", "≈Ω");
            processedName = Regex.Replace(processedName, "[«£]", "√¶");
            processedName = Regex.Replace(processedName, "[·∫°…ôƒÖ]", "a");
            processedName = Regex.Replace(processedName, "[·∫ó]", "ah");
            processedName = Regex.Replace(processedName, "[·∫£]", "√†");
            processedName = Regex.Replace(processedName, "[·∫≠]", "√¢");
            processedName = Regex.Replace(processedName, "[ƒÉƒÅ]", "√£");
            processedName = Regex.Replace(processedName, "[«ü]", "√§");
            processedName = Regex.Replace(processedName, "[·∏É·∏Ö]", "b");
            processedName = Regex.Replace(processedName, "[ƒáƒã]", "c");
            processedName = Regex.Replace(processedName, "[ƒç]", "ch");
            processedName = Regex.Replace(processedName, "[ƒë]", "d≈æ");
            processedName = Regex.Replace(processedName, "[·∏è…ó…ñ·∏ëƒè·∏ç]", "d");
            processedName = Regex.Replace(processedName, "[ƒì·∫Ω]", "√´");
            processedName = Regex.Replace(processedName, "[ƒó]", "√©");
            processedName = Regex.Replace(processedName, "[·∫ª]", "√®");
            processedName = Regex.Replace(processedName, "[·ªáƒõ]", "√™");
            processedName = Regex.Replace(processedName, "[ƒô·∫π]", "e");
            processedName = Regex.Replace(processedName, "[ƒüƒùƒ£«µ]", "g");
            processedName = Regex.Replace(processedName, "[ƒ°]([^h])", "gh$1");
            processedName = Regex.Replace(processedName, "[ƒ°](h)", "gh");
            processedName = Regex.Replace(processedName, "[ƒ•»ü·∏ß·∏©ƒß]", "h");
            processedName = Regex.Replace(processedName, "[ƒ±ƒØ·ªã]", "i");
            processedName = Regex.Replace(processedName, "[ƒ≠ƒ´ƒ©]", "√Ø");
            processedName = Regex.Replace(processedName, "[ƒµ«∞«ß]", "j");
            processedName = Regex.Replace(processedName, "[·∏´]", "kh");
            processedName = Regex.Replace(processedName, "[·∏±·∏≥ƒ∑·∏µ«©]", "k");
            processedName = Regex.Replace(processedName, "[ƒ∫≈Çƒæ·∏∑ƒº]", "l");
            processedName = Regex.Replace(processedName, "[·πÉ·∏ø]", "m");
            processedName = Regex.Replace(processedName, "[≈à]", "√±");
            processedName = Regex.Replace(processedName, "[«π]", "en");
            processedName = Regex.Replace(processedName, "[≈Ñ≈Ü·πÖ·πá≈ã…≤]", "n");
            processedName = Regex.Replace(processedName, "[∆°·ªç]", "o");
            processedName = Regex.Replace(processedName, "[»Ø]", "√≥");
            processedName = Regex.Replace(processedName, "[·ªù]", "√≤");
            processedName = Regex.Replace(processedName, "[·ª°≈ç]", "√µ");
            processedName = Regex.Replace(processedName, "[»´]", "√µ");
            processedName = Regex.Replace(processedName, "[≈èÃ§≈è]", "√µ"); // Maybe replace with "eo"
            processedName = Regex.Replace(processedName, "[≈ë«´]", "√∂");
            processedName = Regex.Replace(processedName, "[«ø]", "√∏");
            processedName = Regex.Replace(processedName, "[·ªô]", "√¥");
            processedName = Regex.Replace(processedName, "[·πï]", "p");
            processedName = Regex.Replace(processedName, "[≈ô]", "rz");
            processedName = Regex.Replace(processedName, "[≈ï·πô·πõ≈ó]", "r");
            processedName = Regex.Replace(processedName, "[≈õ≈ù≈ü»ô·π£·π°]", "s");
            processedName = Regex.Replace(processedName, "[≈•]", "ty");
            processedName = Regex.Replace(processedName, "[»õ≈£·π≠≈ß]", "t");
            processedName = Regex.Replace(processedName, "[≈Ø≈≥·ª•]", "u");
            processedName = Regex.Replace(processedName, "[≈©≈´≈≠≈±·π≥]", "√º");
            processedName = Regex.Replace(processedName, "[·ªß]", "√π");
            processedName = Regex.Replace(processedName, "[·πø]", "v");
            processedName = Regex.Replace(processedName, "[·∫Ö≈µ]", "w");
            processedName = Regex.Replace(processedName, "[·∫ç]", "x");
            processedName = Regex.Replace(processedName, "[≈∑]", "y");
            processedName = Regex.Replace(processedName, "[»≥]", "√ø");
            processedName = Regex.Replace(processedName, "[·ª≥·∫è]", "√Ω");
            processedName = Regex.Replace(processedName, "[≈∫·∫ì ê]", "z");
            processedName = Regex.Replace(processedName, "[≈º]", "≈æ");

            processedName = Regex.Replace(processedName, "[ ª]", "'");

            return processedName;
        }

        protected bool DoNamesMatch(string name1, string name2)
        {
            return name1.RemoveDiacritics() == name2.RemoveDiacritics();
        }
    }
}
